@model PricingTool.MVC.Models.SearchFilters
@{
    Layout = "/Views/Shared/_Layout.cshtml";
}
@*<link rel="stylesheet" href="~/Content/bootstrap.min.css">*@

@*@Styles.Render("~/Content/css")*@
<script src="~/Scripts/jquery.validate.js" type="text/javascript"></script>
@*<script type="text/javascript">
    
    function AddZero(number) {
        if (number < 10) {
            return '0' + number;
        }
        else
            return number;
    }

    function LoadLocations() {
        var locations = $('#Location');
        $.getJSON('@Url.Action("GetLocations")', { country: $('#Country').val() }, function (response) {
            locations.empty(); // remove any existing options
            $.each(response, function (index, item) {
                locations.append(('<option value=' + item.Value + '>' + item.Text + '</option>'));
            });
        });
        return false;
    }

    function SetTodayDate() {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!
        var yyyy = today.getFullYear();
        today = AddZero(dd) + '-' + AddZero(mm) + '-' + yyyy;
        $('#PuDate').val(today);
        $('#DoDate').val('');
    }

    function LoadDoDate() {
        if ($(this).val().length > 0) {
            var day1 = $(this).datepicker('getDate').getDate();
            var month1 = $(this).datepicker('getDate').getMonth();
            var year1 = $(this).datepicker('getDate').getFullYear();

            var DoDateday = new Date(year1, month1, day1);
            DoDateday.setDate(day1 + 1);
            var DoDate30 = new Date(year1, month1, day1);
            DoDate30.setDate(day1 + 30);
            $("#DoDate").datepicker("destroy");
            $("#DoDate").datepicker({
                minDate: DoDateday,
                maxDate: DoDate30,
                dateFormat: "dd-mm-yy",
                numberOfMonths: 2
            });

            var today = DoDateday;
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var yyyy = today.getFullYear();

            today = AddZero(dd) + '-' + AddZero(mm) + '-' + yyyy;
            $('#DoDate').val(today);

            
        } else {
            var DoDate = document.getElementById("DoDate");
        }
    }
    $(document).ready(function () {
        SetTodayDate();
        LoadLocations();
        $('#Country').change(function () {
            LoadLocations();
        });

        $(function () {
            var DoDateday = new Date();
            DoDateday.setDate(DoDateday.getDate());
            $("#PuDate").datepicker({
                minDate: DoDateday,
                default: new Date(),
                dateFormat: "dd-mm-yy",
                numberOfMonths: 2,
                beforeShow: function () {
                    $(".ui-datepicker").css('font-size', 17)
                }
            });
            $("#PuDate").change(
                LoadDoDate
                );
            $(function () {
                $("#DoDate").change(function () {
                    var eDateStr = $(this).val().match(/^(\d{2})\-(\d{2})\-(\d{4})$/);
                    var sDateStr = $("#PuDate").val().match(/^(\d{2})\-(\d{2})\-(\d{4})$/);
                    if (eDateStr !== null && sDateStr !== null &&
                       (eDateStr[3] + eDateStr[2] + eDateStr[1] < sDateStr[3] + sDateStr[2] + sDateStr[1]) &&
                       (eDateStr != null) && sDateStr != null) {
                        alert("Enter all fields correctly1");
                    }
                });
            });
        });
    });

</script>*@

<script>
    function GetDateFromString(dateStr, addDays) {
        var date = dateStr.split('-');
        console.log(dateStr);
        return new Date(date[2], date[1], date[0] + addDays);
    }

    function DateToString(date) {
        var dd = date.getDate();
        var mm = date.getMonth() ; //January is 0!
        var yyyy = date.getFullYear();
        return AddZero(dd) + '-' + AddZero(mm) + '-' + yyyy;
    }

    function AddZero(number) {
        if (number < 10) {
            return '0' + number;
        }
        else
            return number;
    }

    function LoadLocations() {
        var locations = $('#Location');
        $.getJSON('@Url.Action("GetLocations")', { country: $('#Country').val() }, function (response) {
            locations.empty(); // remove any existing options
            $.each(response, function (index, item) {
                locations.append(('<option value=' + item.Value + '>' + item.Text + '</option>'));
            });
        });
        return false;
    }
    
    function LoadCountriesStatic() {
        var countries = $('#Country');
        var countryList = ["Latvia", "Lithuania", "Poland"];
        $.each(countryList, function (index, item) {
            countries.append(('<option>' + item + '</option>'));
        });
    }

    function LoadSourcesStatic() {
        var sources = $('#Source');
        var sourceList = ["Rental Cars", "Car Trawler", "Car Scanner", "Atlas Choise"];
        $.each(sourceList, function (index, item) {
            sources.append(('<option value=' + parseInt(index + 1) + '>' + item + '</option>'));
        });
    }
    $(function () {
        LoadLocations();
        LoadSourcesStatic();
            $('#Country').change(function () {
                LoadLocations();
            });


            $('#PuDate').datetimepicker({
                format: 'DD-MM-YYYY',
                minDate: new Date()
            })

            $('#DoDate').datetimepicker({
                format: 'DD-MM-YYYY'
            });

            $("#PuDate").on("dp.change", function (e) {
                $('#DoDate').data("DateTimePicker").minDate(e.date);
                $(this).datepicker('hide');
            });

            $('#DoTime').datetimepicker({
                format: 'HH:mm',
                stepping: 15
            });

            $('#PuTime').datetimepicker({
                format: 'HH:mm',
                stepping: 15
            });

            $("#DoDate").val("");
            $("#DoTime").val("14:15");
            $("#PuTime").val("14:15");
        });

   
    </script>
<div class="container col-md-offset-1 col-md-6" style="background:grey; margin-top:60px; padding:40px">
    @using (Html.BeginForm("SearchFilterPartial"))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <div class="form-group row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Source, new { @class = "control-label-custom" })
                @Html.DropDownListFor(m => m.Source, new SelectList(new List<SelectListItem>()), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Source)
            </div>
           
        </div>

        <div class="form-group row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Country, new { @class = "control-label-custom" })
                @Html.DropDownListFor(m => m.Country, Model.Countries, "Please select", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Country)
            </div>

            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Location, new { @class = "control-label-custom" })
                @Html.DropDownListFor(m => m.Location, Model.Locations, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Location)
            </div>
        </div>

    <div class="form-group form-inline row">
        <div class="form-group input-group-md col-md-4">
            <label class="control-label control-label-custom">Pick-up date:</label>
            <div class="input-group col-md-12" style="margin-left: 0px; padding-left: 0px;padding-right : 0px">
                <span class="input-group-addon" id="basic-addon1"><span class=" glyphicon glyphicon-calendar"></span></span>
                @Html.TextBoxFor(m => m.PuDate, new { @class = "form-control" })
            </div>
            @Html.ValidationMessageFor(model => model.PuDate)
        </div>

        <div class="form-group input-group-md col-md-2">
            <label class="control-label control-label-custom"></label>
            <div class="input-group col-md-12" style="margin-left: 0px; padding-left: 0px;padding-right : 0px">
                @Html.TextBoxFor(m => m.PuTime, new { @class = "form-control form-fixer" })
            </div>
            @Html.ValidationMessageFor(model => model.PuTime)
        </div>

        <div class="form-group input-group-md col-md-4">
            <label class="control-label control-label-custom">Pick-up date:</label>
            <div class="input-group col-md-12" style="margin-left: 0px; padding-left: 0px;padding-right : 0px">
                <span class="input-group-addon" id="basic-addon1"><span class=" glyphicon glyphicon-calendar"></span></span>
                @Html.TextBoxFor(m => m.DoDate, new { @class = "form-control" })
            </div>
            @Html.ValidationMessageFor(model => model.DoDate)
        </div>

        <div class="form-group input-group-md col-md-2">
            <label class="control-label control-label-custom"></label>
            <div class="input-group col-md-12" style="margin-left: 0px; padding-left: 0px;padding-right : 0px">
                @Html.TextBoxFor(m => m.DoTime, new { @class = "form-control form-fixer" })
            </div>
            @Html.ValidationMessageFor(model => model.DoTime)
        </div>
    </div>

            <div class="form-group col-lg-offset-4 col-md-10">
            <button class="btn btn-primary btn-group-lg btn-xlarge">
                Generate
            </button>
        </div>
    }
    </div>
