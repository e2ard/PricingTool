@model PricingTool.MVC.Models.SearchFilters
@{
    Layout = "/Views/Shared/_Layout.cshtml";
}
@*<link rel="stylesheet" href="~/Content/bootstrap.min.css">*@

@*@Styles.Render("~/Content/css")*@
<script src="~/Scripts/jquery.validate.js" type="text/javascript"></script>
<script>
function AddDays(date, addDays) {
    var dat = new Date(date.valueOf());
    dat.setDate(dat.getDate() + addDays);
    return dat;
}
function GetDateFromString(dateStr) {
    var date = dateStr.split('-');
    var newDate = new Date(date[2], date[1] - 1, date[0]);
    return newDate;
}

function DateToString(date) {
    var dat = new Date(date.valueOf());
    var dd = date.getDate();
    var mm = date.getMonth(); //January is 0!
    var yyyy = date.getFullYear();
    return AddZero(dd) + '-' + AddZero(mm + 1) + '-' + yyyy;
}

function AddZero(number) {
    if (number < 10) {
        return '0' + number;
    }
    else
        return number;
}

function LoadLocations() {
    var locations = $('#Location');
    $.getJSON('@Url.Action("GetLocations")', { country: $('#Country').val() }, function (response) {
        locations.empty(); // remove any existing options
        $.each(response, function (index, item) {
            locations.append(('<option value=' + item.Value + '>' + item.Text + '</option>'));
        });
    });
    return false;
}
    

function LoadSourcesStatic() {
    var sources = $('#Source');
    var sourceList = ["Rental Cars", "Car Trawler", "Car Scanner", "Atlas Choise"];
    $.each(sourceList, function (index, item) {
        sources.append(('<option value=' + parseInt(index + 1) + '>' + item + '</option>'));
    });
}

$(document).ready(function () {
    LoadLocations();
    //LoadSourcesStatic();
        $('#Country').change(function () {
            LoadLocations();
        });

        $('#PuDate').datetimepicker({
            format: 'DD-MM-YYYY',
            minDate: AddDays(new Date(), -1)
        })

        $('#DoDate').datetimepicker({
            format: 'DD-MM-YYYY',
            minDate: AddDays(new Date(), 1)
        });
        
        $('#PuDate').val(DateToString(AddDays(new Date(), 1)));
        $('#DoDate').val(DateToString(AddDays(GetDateFromString($("#PuDate").val()), 7)));
        
        $("#PuDate").on("dp.change", function (e) {
            $('#DoDate').data("DateTimePicker").minDate(AddDays(GetDateFromString($("#PuDate").val()), 1));
            $('#DoDate').val(DateToString(AddDays(GetDateFromString($("#PuDate").val()), 7)));
            $(this).datepicker('hide');
        });

        $('#DoTime').datetimepicker({
            format: 'HH:mm',
            stepping: 15
        });

        $('#PuTime').datetimepicker({
            format: 'HH:mm',
            stepping: 15
        });

        $("#DoTime").val("10:00");
        $("#PuTime").val("10:00");
    });

   
</script>
<div class="container col-md-offset-1 col-md-6" style="background:grey; margin-top:60px; padding:40px">
    @using (Html.BeginForm("SearchFilterPartial"))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <div class="form-group row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Source, new { @class = "control-label-custom" })
                @Html.DropDownListFor(m => m.Source, new SelectList(ViewBag.Sources, "Value", "Text", 0), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Source)
            </div>
           
        </div>

        <div class="form-group row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Country, new { @class = "control-label-custom" })
                @Html.DropDownListFor(m => m.Country, new SelectList(ViewBag.Countries, "Value", "Text", 0), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Country)
            </div>

            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Location, new { @class = "control-label-custom" })
                @Html.DropDownListFor(m => m.Location, new SelectList(ViewBag.Locations, "Value", "Text", 0), "Please select", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Location)
            </div>
        </div>

    <div class="form-group form-inline row">
        <div class="form-group input-group-md col-md-4">
            <label class="control-label control-label-custom">Pick-up date:</label>
            <div class="input-group col-md-12" style="margin-left: 0px; padding-left: 0px;padding-right : 0px">
                <span class="input-group-addon" id="basic-addon1"><span class=" glyphicon glyphicon-calendar"></span></span>
                @Html.TextBoxFor(m => m.PuDate, new { @class = "form-control" })
            </div>
            @Html.ValidationMessageFor(model => model.PuDate)
        </div>

        <div class="form-group input-group-md col-md-2">
            <label class="control-label control-label-custom"></label>
            <div class="input-group col-md-12" style="margin-left: 0px; padding-left: 0px;padding-right : 0px">
                @Html.TextBoxFor(m => m.PuTime, new { @class = "form-control form-fixer" })
            </div>
            @Html.ValidationMessageFor(model => model.PuTime)
        </div>

        <div class="form-group input-group-md col-md-4">
            <label class="control-label control-label-custom">Pick-up date:</label>
            <div class="input-group col-md-12" style="margin-left: 0px; padding-left: 0px;padding-right : 0px">
                <span class="input-group-addon" id="basic-addon1"><span class=" glyphicon glyphicon-calendar"></span></span>
                @Html.TextBoxFor(m => m.DoDate, new { @class = "form-control" })
            </div>
            @Html.ValidationMessageFor(model => model.DoDate)
        </div>

        <div class="form-group input-group-md col-md-2">
            <label class="control-label control-label-custom"></label>
            <div class="input-group col-md-12" style="margin-left: 0px; padding-left: 0px;padding-right : 0px">
                @Html.TextBoxFor(m => m.DoTime, new { @class = "form-control form-fixer" })
            </div>
            @Html.ValidationMessageFor(model => model.DoTime)
        </div>
    </div>

            <div class="form-group col-lg-offset-4 col-md-10">
            <button class="btn btn-primary btn-group-lg btn-xlarge">
                Generate
            </button>
        </div>
    }
    </div>
